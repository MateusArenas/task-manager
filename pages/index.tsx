import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { Carousel } from 'react-bootstrap';
// import styled from "@emotion/styled";

import produce from 'immer'

import { DragDropContext, Droppable, DragStart, DragUpdate, DropResult, ResponderProvided } from 'react-beautiful-dnd';

import React from 'react'
import dynamic from 'next/dynamic'
import Navbar from '../components/NavBar'

const Board = dynamic(() => import('../components/Board'), { ssr: false });

interface ListsContextData {
  lists: Array<{ id: string }>
  moveItem: (fromList: number, from: number, to: number) => any
}

export const ListsContext = React.createContext<ListsContextData>({} as ListsContextData)

const Home: NextPage = () => {
  const [homeIndex, setHomeIndex] = React.useState<number | null>(null);
  const [tasks, setTasks] = React.useState<any>({
    'task-1': { id: 'task-1', content: "Take out the garbage" },
    'task-2': { id: 'task-2', content: "Watch my favorite show" },
    'task-3': { id: 'task-3', content: "Change my phone" },
    'task-4': { id: 'task-4', content: "Cook dinner" },
    'task-5': { id: 'task-5', content: "Go to game" },
    'task-6': { id: 'task-6', content: "Working" },
  })
  const [columns, setColumns] = React.useState<any>({
    'column-1': {
      id: 'column-1',
      title: 'To do',
      taskIds: ['task-1', 'task-2', 'task-3', 'task-4']
    },
    'column-2': {
      id: 'column-2',
      title: 'Working',
      taskIds: ['task-5', 'task-6']
    }
  })
  const [columnOrder, setColumnOrder] = React.useState(['column-1', 'column-2'])

  function onDragEnd(result: DropResult, provided: ResponderProvided) {
    const message = result.destination 
    ? `You have moved the task in position ${result.source.index + 1} to ${result.destination.index + 1}`
    : `the task has been returned to its starting position of ${result.source.index + 1} `;
    
    provided.announce(message)

    setHomeIndex(null);

    document.body.style.color = 'inherit';
    document.body.style.backgroundColor = 'inherit';

    const { destination, source, draggableId, type } = result;

    if (!destination) {
      return;
    }

    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      return;
    }

    if (type === 'column') {
      const newColumnOrder = Array.from(columnOrder)
      newColumnOrder.splice(source.index, 1);
      newColumnOrder.splice(destination.index, 0, draggableId);

      setColumnOrder(newColumnOrder);
      return;
    }

    const home = columns[source.droppableId];
    const foreign = columns[destination.droppableId];

    if (home === foreign) {
      const newTaskIds = Array.from(home.taskIds);
      newTaskIds.splice(source.index, 1);
      newTaskIds.splice(destination.index, 0, draggableId);
  
      console.log({ draggableId, destination });
  
      const newColumn = { ...home, taskIds: newTaskIds };
  
      setColumns(({ ...columns, [newColumn.id]: newColumn }))
      return;
    }

    // Moving from one list to another
    const startTaskIds = Array.from(home.taskIds);
    startTaskIds.splice(source.index, 1);
    const newStart = { ...home, taskIds: startTaskIds };

    const finishTaskIds = Array.from(foreign.taskIds);
    finishTaskIds.splice(destination.index, 0, draggableId);
    const newFinish = { ...foreign, taskIds: finishTaskIds };

    setColumns({ ...columns, [newStart.id]: newStart, [newFinish.id]: newFinish });
    return;
  }

  function onDragUpdate(update: DragUpdate,provided: ResponderProvided) {
    const { destination } = update;
    const opacity = destination 
      ? destination.index / Object.keys(tasks).length
      : 0;
    document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;

    const message = update.destination 
      ? `You have moved the task in position ${update.destination.index + 1}`
      : `You are currently not over a droppable area `;

    provided.announce(message)
  }

  function onDragStart(start: DragStart, provided: ResponderProvided) {
    document.body.style.color = 'orange';
    document.body.style.transition = 'background-color 0.2s ease';

    provided.announce(
      `You have lifted the task in position ${start.source.index + 1}`,
    )

    const homeIndex = columnOrder.indexOf(start.source.droppableId)
    setHomeIndex(homeIndex);
  }

  return (
    <DragDropContext
      onDragStart={onDragStart}
      onDragUpdate={onDragUpdate}
      onDragEnd={onDragEnd}
    >
      <div className={'h-100 d-flex flex-column'}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Navbar />



        <Board 
          columnOrder={columnOrder}
          columns={columns}
          tasks={tasks}
        />

      
    {/* <Carousel wrap={false} className="h-100" variant="dark">
        {[1,2,3,4,5,6].map((item, index) => (         
        <Carousel.Item key={index} className="h-100">
          
          <Carousel.Caption>
            <h5>First slide label</h5>
            <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>
          </Carousel.Caption>
        </Carousel.Item>
        ))}
    </Carousel> */}
      </div>
    </DragDropContext>
  )
}

export default Home



